{"name":"Php-recursive","tagline":"PHP Library that makes recursive methods easy to work with.","body":"# Recursive PHP\r\n<img src=\"https://travis-ci.org/JREAM/php-recursion.svg?branch=master\">\r\n<a href=\"https://codeclimate.com/github/JREAM/php-recursive\"><img src=\"https://codeclimate.com/github/JREAM/php-recursive/badges/gpa.svg\" /></a>\r\n\r\nA PHP Library that makes recursive methods easy to work with.\r\n\r\n- Usage\r\n    - Build\r\n    - Dom\r\n    - Find\r\n    - Flatten\r\n    - Modify\r\n    - Replace\r\n- Recursive Types\r\n    - One Way Tree\r\n    - Multi-Way Tree\r\n- Testing\r\n- Building Docs\r\n\r\n## Usage\r\nSee the Examples\r\n\r\n### Build\r\n```\r\nuse \\Jream\\Recursive\\Build;\r\n$build = new Build();\r\n```\r\n\r\n### Dom\r\n```\r\nuse \\Jream\\Recursive\\Dom;\r\n$dom = new Dom();\r\n```\r\n\r\n### Find\r\n```\r\nuse \\Jream\\Recursive\\Find;\r\n$find = new Find();\r\n\r\n$find = new Find;\r\n$find->byKey($data, 'name')->get();\r\n$find->byValue($data, 'Benjamin')->get();\r\n\r\n$search = $find->byValue($data, 'time_days');\r\n$search->result;\r\n\r\n```\r\n\r\n### Flatten\r\n```\r\nuse \\Jream\\Recursive\\Flatten;\r\n$flatten = new Flatten();\r\n```\r\n\r\n### Modify\r\n```\r\nuse \\Jream\\Recursive\\Modify;\r\n$modify = new Modify();\r\n```\r\n\r\n### Replace\r\n```\r\nuse \\Jream\\Recursive\\Replace;\r\n$replace = new Replace();\r\n```\r\n\r\n#Recursive Types\r\nThere are two recursive types handled here.\r\n\r\n### One Way Tree\r\nA one way tree is like a directory structure going one route to it's destination, it's very easy to navigate:\r\n\r\n    $tree = [\r\n        'folder_a' =>\r\n            [\r\n                'folder_b' => [\r\n                    'file_1',\r\n                    'file_2',\r\n                ]\r\n            ],\r\n        'folder_c' =>\r\n            [\r\n                'file_x',\r\n                'file_y',\r\n                'file_z'\r\n            ]\r\n    ];\r\n\r\nAn Example Visually:\r\n\r\n    tree\r\n    |\r\n     \\ folder_a\r\n      \\ folder_b\r\n        | file_1\r\n        | file_2\r\n    \\ folder_c\r\n      | file_x\r\n      | file_y\r\n      | file_z\r\n\r\nAn example all paths would be:\r\n\r\n    $tree['folder_a']['folder_b'][0] = 'file_1'\r\n    $tree['folder_a']['folder_b'][1] = 'file_2'\r\n    $tree['folder_c'][0] = 'file_x'\r\n    $tree['folder_c'][0] = 'file_y'\r\n    $tree['folder_c'][0] = 'file_z'\r\n\r\n\r\n### Multi-Way Tree\r\nA Multi-Way Tree or a binary tree is much more complicated, because it can split in many directions.\r\n\r\n    $btree = [\r\n        '1' =>\r\n            '2' => [\r\n                '3' =>\r\n                    'foo',\r\n                    'bar'\r\n                '4' => [\r\n                    [\r\n                        'baz',\r\n                        'qux',\r\n                    ]\r\n                    [\r\n                        'corge',\r\n                        'garply'\r\n                    ]\r\n                ]\r\n            ]\r\n    ];\r\n\r\nAn example visually would be:\r\n\r\n          1\r\n         /\r\n        2\r\n       / \\\r\n      3   4\r\n     /\\    /\\\r\n    0  1  0  1\r\n         /\\  /\\\r\n        0  1 0 1\r\n\r\n\r\nSo all the paths to `$btree` can get more complex, eg:\r\n\r\n    $btree[1][2][3][0] = 'foo';\r\n    $btree[1][2][3][1] = 'bar';\r\n    $btree[1][2][4][0][0] = 'baz';\r\n    $btree[1][2][4][0][1] = 'qux';\r\n    $btree[1][2][4][1][0] = 'corge';\r\n    $btree[1][2][4][1][1] = 'garply';\r\n\r\n# Testing\r\n\r\nTest with composer:\r\n\r\n    ./vendor/bin/phpunit tests\r\n\r\n# Building Docs\r\nI used ApiGen for this:\r\n\r\n    wget http://apigen.org/apigen.phar\r\n    chmod +x apigen.phar\r\n    mv apigen.phar /usr/local/bin/apigen\r\n\r\nTo generate docs:\r\n\r\n    apigen generate -s src -d docs","google":"UA-3106599-2","note":"Don't delete this file! It's used internally to help with page regeneration."}